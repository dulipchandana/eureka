spring.application.name=discovery-server

#discovery-server
eureka.client.register-with-eureka=false
eureka.client.fetch-registry=false
server.port=${discovery.server.port}
#8761
eureka.instance.hostname=${discovery.instance.hostname}
eureka.instance.instanceId=${eureka.instance.hostname}-${discovery.server.port}
eureka.client.serviceUrl.defaultZone=${eureka.client.serviceUrl.peer2}
eureka.server.peer-eureka-nodes-update-interval-ms=1000
#eureka discovery sever clustering setting 
#https://github.com/spring-cloud/spring-cloud-netflix/issues/838
eureka.server.renewal-percent-threshold=0.49
eureka.server.enable-self-preservation=true
#The point is that the Eureka server makes implicit assumption that clients are sending their 
#heartbeat at a fixed rate of 1 every 30 seconds. If two instances are registered in the registry,
# the server expects to receive 2 instances * 1 heartbeat/30s * threshold % every minutes. 
#With a threshold set at 85%, it expects 3 heartbeats in the last minute. If the rate drops below this value, 
#the self protection mode is activated. If you loose one of the two instances, 
#the server receives at most two heartbeats and activates the self protection mode.


eureka.server.eviction-interval-timer-in-ms=10000


